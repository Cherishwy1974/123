#!/usr/bin/env python3
# -*- coding: utf-8 -*-

course_data = {
    1: {
        'title': '洛必达法则',
        'subtitle': '欢迎学习洛必达法则：求解不定式极限的利器。',
        'speech': '同学们好！欢迎来到洛必达法则的学习。今天我们将学习一个非常重要且强大的工具，它专门用来求解不定式极限。这个法则在高等数学中应用非常广泛，掌握它能帮助我们轻松解决很多看似困难的极限问题。让我们开始吧！',
        'action': 'A_RLH_welcome_O'
    },
    2: {
        'title': '0/0型不定式',
        'subtitle': '当直接代入得到 0/0 时，我们称之为不定式，无法直接确定其值。',
        'speech': '我们来看一个经典的例子，求sinx除以x的极限，当x趋于0时。如果直接代入，分子sin0等于0，分母也是0。我们就得到了一个0比0的形式。这在数学上叫做不定式，它的结果是不确定的，不能想当然地认为是1或者0。',
        'action': 'A_RH_point_O'
    },
    3: {
        'title': '∞/∞型不定式',
        'subtitle': '当变量趋于无穷，得到 ∞/∞ 时，这也是一种常见的不定式。',
        'speech': '除了0比0，还有另一种常见的不定式。比如求e的x次方除以x平方的极限，当x趋于正无穷时。这时候，分子和分母都冲向了无穷大。我们得到的就是无穷比无穷的形式。它的结果同样是不确定的，需要特殊的工具来解决。',
        'action': 'A_LH_introduced_O'
    },
    4: {
        'title': '引入洛必达法则',
        'subtitle': '为解决不定式问题，我们引入一个强大的工具——洛必达法则。',
        'speech': '那么，如何解决这些棘手的不定式呢？今天，我们就来学习一个专门为此而生的强大武器，它的名字叫洛必达法则。这个法则的思路非常巧妙，它告诉我们，当一个分式的极限不好求时，我们可以试试看，求它的分子分母各自求导之后的那个新分式的极限。',
        'action': 'A_RH_point_O'
    },
    5: {
        'title': '洛必达法则(0/0型)',
        'subtitle': '洛必达法则(0/0型)：原极限等于其分子分母分别求导后的极限。',
        'speech': '我们先来看0比0型洛必达法则的严格定义。它有三个前提条件：第一，极限必须是0比0的形式。第二，分子分母函数在求极限点的附近要可导，并且分母的导数不能是0。第三，求导之后的新分式，它的极限必须存在。如果这三点都满足，那么原来的极限就等于求导后的新极限。',
        'action': 'A_LH_introduced_O'
    },
    6: {
        'title': '洛必达法则(∞/∞型)',
        'subtitle': '该法则同样适用于 ∞/∞ 型不定式，使用条件和结论完全相同。',
        'speech': '洛必达法则的强大之处在于，它不仅对0比0型有效，对我们刚才提到的无穷比无穷型，也完全适用。定理的内容几乎一模一样，只需要把第一个条件，从函数趋于0，改成函数趋于无穷大就可以了。其他条件和结论都保持不变。这一点非常方便我们记忆和使用。',
        'action': 'A_LH_introduced_O'
    },
    7: {
        'title': '例1：lim(sin x / x)',
        'subtitle': '例1(0/0型)：求 lim(sin x / x)，应用法则后得 lim(cos x / 1)，结果为1。',
        'speech': '理论说完了，我们来实战一下。回到最初的问题，求sinx除以x的极限。第一步，检查类型，是0比0型，满足条件。第二步，应用法则，对分子sinx求导得到cosx，对分母x求导得到1。第三步，计算新极限，cosx除以1的极限，就是cos0，等于1。问题轻松解决！',
        'action': 'A_RH_point_O'
    },
    8: {
        'title': '例2：lim(e^x / x²) 第一步',
        'subtitle': '例2(∞/∞型)：求 lim(e^x / x²)，首次应用法则后得到 lim(e^x / 2x)。',
        'speech': '我们再来看无穷比无穷的例子，e的x次方除以x平方。第一步，检查类型，是无穷比无穷，满足条件。第二步，应用法则，分子求导还是e的x次方，分母求导是2x。我们得到的新极限是e的x次方除以2x。但是，我们发现一个问题，这个新极限仍然是无穷比无穷的形式！这该怎么办呢？',
        'action': 'A_LH_introduced_O'
    },
    9: {
        'title': '例2：连续使用法则',
        'subtitle': '新极限仍为 ∞/∞ 型，我们可以连续使用洛必达法则，最终得到 +∞。',
        'speech': '别担心，洛必达法则的另一个优点是，只要条件一直满足，我们就可以一直用下去！对于刚才得到的e的x次方除以2x，我们再次检查，它仍然是无穷比无穷型，所以，我们可以对它再次使用洛必达法则！分子求导还是e的x次方，分母求导变成了2。现在极限就非常清晰了，结果是正无穷。',
        'action': 'A_RH_point_O'
    },
    10: {
        'title': '0·∞型不定式',
        'subtitle': '其他不定式(0·∞型)：需先变形为 f/(1/g) 或 g/(1/f) 来创造分数形式。',
        'speech': '到目前为止，我们只讨论了0比0和无穷比无穷这两种标准的不定式。但还有其他类型，比如0乘以无穷。对于这种，我们需要先做一个变形，把它写成分数形式。通常是把其中一个因子，写成1除以它的倒数的形式，放到分母上，这样就把它转化成了标准的0比0或者无穷比无穷型。',
        'action': 'A_LH_introduced_O'
    },
    11: {
        'title': '∞-∞型不定式',
        'subtitle': '其他不定式(∞-∞型)：通常通过通分或有理化，将其转化为 0/0 型。',
        'speech': '另一种类型是无穷减无穷。这种不定式通常出现在分式相减的情况。我们的策略是，通过通分，把两个分式合并成一个。这样一来，它通常就会变成我们熟悉的0比0型了，接下来就可以使用洛必达法则了。',
        'action': 'A_RH_point_O'
    },
    12: {
        'title': '幂指型不定式',
        'subtitle': '其他不定式(幂指型)：通过取对数(ln)的方法，将其转化为 0·∞ 型。',
        'speech': '最复杂的一类不定式是幂指函数型，比如1的无穷次方，0的0次方等等。对付它们的通用策略是取对数。我们先设原函数为y，然后两边取自然对数，利用对数的性质把指数拿下来。这样问题就转化成了求lny的极限，它通常是0乘以无穷型，我们就可以按照前面的方法处理。最后别忘了，求出来的是lny的极限L，原极限应该是e的L次方。',
        'action': 'A_LH_introduced_O'
    },
    13: {
        'title': '例3：lim(x·ln x)',
        'subtitle': '例3(0·∞型)：求 lim(x ln x)，转化为 lim(ln x / (1/x)) 后应用法则，得0。',
        'speech': '我们来看一个0乘以无穷的例子，求x乘以lnx的极限，当x从右侧趋于0时。这是典型的0乘以无穷型。我们把它变形为lnx除以x分之一。现在，它变成了无穷比无穷型，满足了洛必达法则的条件。分子求导是x分之一，分母求导是负x平方分之一，化简后等于负x，极限就是0。',
        'action': 'A_RH_point_O'
    },
    14: {
        'title': '注意事项(一)',
        'subtitle': '注意：必须先检查是否为不定式，否则滥用法则将导致错误结果。',
        'speech': '学习了强大的工具，更要了解它的使用限制。最需要注意的一点是，使用前必须检查它是不是0比0或者无穷比无穷型！如果不是，比如一个极限可以直接代入算出结果，你却错误地用了洛必达，会得到一个完全错误的答案。所以，检查类型是铁律！',
        'action': 'A_LH_introduced_O'
    },
    15: {
        'title': '注意事项(二)',
        'subtitle': '注意：洛必达法则是分别求导，切勿与商的求导法则相混淆。',
        'speech': '第二个常见的错误，是把洛必达法则和我们之前学的商的求导法则搞混了。请大家一定记住，洛必达法则是对分子和分母分别求导，它是一个求极限的技巧。而商的求导法则是求一个分式函数的导数，两者完全不是一回事。',
        'action': 'A_RH_point_O'
    },
    16: {
        'title': '总结(一)',
        'subtitle': '总结：洛必达法则的核心是转化不定式极限为导数的比值极限。',
        'speech': '好了，我们来总结一下洛必达法则的核心内容。它的公式是，原分式的极限等于导数分式的极限。它直接适用于0比0和无穷比无穷这两种不定式，并且使用时需要满足三个前提条件。这是法则的基础。',
        'action': 'A_LH_introduced_O'
    },
    17: {
        'title': '总结(二)',
        'subtitle': '总结：对于复杂不定式，牢记先判断，再转化，后求导的原则。',
        'speech': '对于其他非标准类型的不定式，我们的核心思想是转化。0乘以无穷型化为分式；无穷减无穷型进行通分；而幂指型则取对数。请同学们牢记这个流程：先判断类型，再选择合适的转化方法，最后应用洛必达法则求导。谢谢大家！',
        'action': 'A_RLH_welcome_O'
    }
}

# 生成脚本配置
print("const subtitleScript = {")
for num, data in course_data.items():
    print(f'    "{num}": "{data["subtitle"]}",')
print("};")

print("\nconst speechScript = {")
for num, data in course_data.items():
    print(f'    "{num}": "{data["speech"]}",')
print("};")

print("\nconst actionMap = {")
actions = ", ".join([f'"{num}": "{data["action"]}"' for num, data in course_data.items()])
print(f"    {actions}")
print("};")
